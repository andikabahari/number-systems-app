{"version":3,"sources":["logo.svg","components/AppHeader.js","functions/conversion.js","components/AppCalculator.js","components/AppConverter.js","components/AppFooter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getCurrentRoute","window","location","href","replace","split","reverse","AppHeader","state","current","componentDidMount","setState","componentDidUpdate","handleClick","e","key","Header","Layout","style","height","padding","backgroundColor","border","title","avatar","src","Logo","onClick","this","selectedKeys","mode","Item","to","type","Component","isNumberValid","n","isNaN","convertDecimalToBinary","toString","convertDecimalToOctal","convertDecimalToHex","convertBinaryToDecimal","binary","i","length","parseInt","join","convertBinaryToOctal","convertBinaryToHex","convertOctalToDecimal","octal","convertOctalToBinary","convertOctalToHex","convertHexToDecimal","hex","convertHexToBinary","convertHexToOctal","FormCalculator","result","handleSubmit","preventDefault","props","form","validateFields","err","values","calculationBase","firstNumber","secondNumber","operator","Number","handleReset","resetFields","fieldsError","Option","Select","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","calculationBaseError","firstNumberError","secondNumberError","operatorError","onSubmit","label","validateStatus","help","initialValue","rules","required","message","value","placeholder","htmlType","disabled","Object","keys","some","field","marginLeft","size","AppCalculator","Form","create","name","FormConverter","baseToConvert","numberToConvert","conversionBase","toUpperCase","baseToConvertError","numberToConvertError","conversionBaseError","AppConverter","Footer","AppFooter","theme","App","Content","justify","xl","lg","md","sm","xs","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,kC,0SCMrCC,EAAkB,WACtB,OAAOC,OAAOC,SAASC,KACpBC,QAAQ,cAAe,IACvBA,QAAQ,OAAQ,IAChBC,MAAM,KACNC,UAAU,IA6DAC,E,2MAzDbC,MAAQ,CACNC,QAAS,I,EAGXC,kBAAoB,WACdV,MAAsB,EAAKQ,MAAMC,SACnC,EAAKE,SAAS,CAAEF,QAAST,O,EAI7BY,mBAAqB,WACfZ,MAAsB,EAAKQ,MAAMC,SACnC,EAAKE,SAAS,CAAEF,QAAST,O,EAI7Ba,YAAc,SAAAC,GACZ,EAAKH,SAAS,CAAEF,QAASK,EAAEC,O,wEAGnB,IACAC,EAAWC,IAAXD,OACR,OACE,kBAACA,EAAD,CAAQE,MAAO,CAAEC,OAAQ,OAAQC,QAAS,QACxC,kBAAC,IAAD,CACEF,MAAO,CACLG,gBAAiB,OACjBC,OAAQ,gCAEVC,MAAM,qBACNC,OAAQ,CACNC,IAAKC,OAGT,kBAAC,IAAD,CACEC,QAASC,KAAKf,YACdgB,aAAc,CAACD,KAAKpB,MAAMC,SAC1BqB,KAAK,cAEL,kBAAC,IAAKC,KAAN,CAAWhB,IAAI,aACb,kBAAC,IAAD,CAAMiB,GAAG,aACP,kBAAC,IAAD,CAAMC,KAAK,SADb,cAKF,kBAAC,IAAKF,KAAN,CAAWhB,IAAI,cACb,kBAAC,IAAD,CAAMiB,GAAG,cACP,kBAAC,IAAD,CAAMC,KAAK,eADb,qB,GA/CYC,a,6CCdXC,EAAgB,SAAAC,GAC3B,OAAIC,MAAMD,IAAmB,kBAANA,GAOZE,EAAyB,SAAAF,GACpC,OAAID,EAAcC,GACTA,EAAEG,SAAS,GAGb,MAGIC,EAAwB,SAAAJ,GACnC,OAAID,EAAcC,GACTA,EAAEG,SAAS,GAGb,MAGIE,EAAsB,SAAAL,GACjC,OAAID,EAAcC,GACTA,EAAEG,SAAS,IAGb,MAGIG,EAAyB,SAAAN,GAGpC,IAFA,IAAIO,EAASP,EAAEG,WAAWlC,MAAM,IAEvBuC,EAAI,EAAGA,EAAIR,EAAEG,WAAWM,OAAQD,IACvC,GAAID,EAAOC,GAAK,GAAKD,EAAOC,GAAK,EAC/B,OAAO,KAIX,OAAOE,SAASH,EAAOI,KAAK,IAAK,IAGtBC,EAAuB,SAAAZ,GAClC,OAAOI,EAAsBE,EAAuBN,KAGzCa,EAAqB,SAAAb,GAChC,OAAOK,EAAoBC,EAAuBN,KAGvCc,EAAwB,SAAAd,GAGnC,IAFA,IAAIe,EAAQf,EAAEG,WAAWlC,MAAM,IAEtBuC,EAAI,EAAGA,EAAIR,EAAEG,WAAWM,OAAQD,IACvC,GAAIO,EAAMP,GAAK,GAAKO,EAAMP,GAAK,EAC7B,OAAO,KAIX,OAAOE,SAASK,EAAMJ,KAAK,IAAK,IAGrBK,EAAuB,SAAAhB,GAClC,OAAOE,EAAuBY,EAAsBd,KAGzCiB,EAAoB,SAAAjB,GAC/B,OAAOK,EAAoBS,EAAsBd,KAGtCkB,EAAsB,SAAAlB,GAGjC,IAFA,IAAImB,EAAMnB,EAAEG,WAAWlC,MAAM,IAEpBuC,EAAI,EAAGA,EAAIR,EAAEG,WAAWM,OAAQD,IACvC,GAAIW,EAAIX,GAAK,GAAKW,EAAIX,GAAK,GACzB,OAAO,KAIX,OAAOE,SAASS,EAAIR,KAAK,IAAK,KAGnBS,EAAqB,SAAApB,GAChC,OAAOE,EAAuBgB,EAAoBlB,KAGvCqB,EAAoB,SAAArB,GAC/B,OAAOI,EAAsBc,EAAoBlB,KCzE7CsB,E,2MACJlD,MAAQ,CACNmD,OAAQ,M,EAOVC,aAAe,SAAA9C,GACbA,EAAE+C,iBAEF,EAAKC,MAAMC,KAAKC,gBAAe,SAACC,EAAKC,GACnC,IAAKD,EAAK,CAAC,IACDE,EAAyDD,EAAzDC,gBAAiBC,EAAwCF,EAAxCE,YAAaC,EAA2BH,EAA3BG,aAAcC,EAAaJ,EAAbI,SAChDX,EAAS,KAEb,OAAQQ,GACN,IAAK,UACH,OAAQG,GACN,IAAK,WACHX,EAASY,OAAOH,GAAeG,OAAOF,GACtC,MACF,IAAK,cACHV,EAASY,OAAOH,GAAeG,OAAOF,GACtC,MACF,IAAK,iBACHV,EAASY,OAAOH,GAAeG,OAAOF,GACtC,MACF,IAAK,WACHV,EAASY,OAAOH,GAAeG,OAAOF,GAG1C,MACF,IAAK,SACH,OAAQC,GACN,IAAK,WACHX,EAASrB,EACPI,EAAuB0B,GACrB1B,EAAuB2B,IAE3B,MACF,IAAK,cACHV,EAASrB,EACPI,EAAuB0B,GACrB1B,EAAuB2B,IAE3B,MACF,IAAK,iBACHV,EAASrB,EACPI,EAAuB0B,GACrB1B,EAAuB2B,IAE3B,MACF,IAAK,WACHV,EAASrB,EACPI,EAAuB0B,GACrB1B,EAAuB2B,IAI/B,MACF,IAAK,QACH,OAAQC,GACN,IAAK,WACHX,EAASnB,EACPU,EAAsBkB,GACpBlB,EAAsBmB,IAE1B,MACF,IAAK,cACHV,EAASnB,EACPU,EAAsBkB,GACpBlB,EAAsBmB,IAE1B,MACF,IAAK,iBACHV,EAASnB,EACPU,EAAsBkB,GACpBlB,EAAsBmB,IAE1B,MACF,IAAK,WACHV,EAASnB,EACPU,EAAsBkB,GACpBlB,EAAsBmB,IAI9B,MACF,IAAK,MACH,OAAQC,GACN,IAAK,WACHX,EAASlB,EACPa,EAAoBc,GAClBd,EAAoBe,IAExB,MACF,IAAK,cACHV,EAASlB,EACPa,EAAoBc,GAClBd,EAAoBe,IAExB,MACF,IAAK,iBACHV,EAASlB,EACPa,EAAoBc,GAClBd,EAAoBe,IAExB,MACF,IAAK,WACHV,EAASlB,EACPa,EAAoBc,GAClBd,EAAoBe,KAOhC,EAAK1D,SAAS,CAAEgD,gB,EAKtBa,YAAc,WACZ,EAAKV,MAAMC,KAAKU,cAChB,EAAKX,MAAMC,KAAKC,iBAEhB,EAAKrD,SAAS,CAAEgD,OAAQ,Q,mFA3HxB/B,KAAKkC,MAAMC,KAAKC,mB,+BA8HR,IAxIMU,EAyINC,EAAWC,IAAXD,OADD,EAOH/C,KAAKkC,MAAMC,KAJbc,EAHK,EAGLA,kBACAC,EAJK,EAILA,eACAC,EALK,EAKLA,cACAC,EANK,EAMLA,eAIIC,EACJD,EAAe,oBAAsBD,EAAc,mBAC/CG,EACJF,EAAe,gBAAkBD,EAAc,eAC3CI,EACJH,EAAe,iBAAmBD,EAAc,gBAC5CK,EACJJ,EAAe,aAAeD,EAAc,YAE9C,OACE,kBAAC,IAAD,CAAMxD,MAAM,cACV,kBAAC,IAAD,CAAM8D,SAAUzD,KAAKgC,cACnB,kBAAC,IAAK7B,KAAN,CACEuD,MAAM,OACNC,eAAgBN,EAAuB,QAAU,GACjDO,KAAMP,GAAwB,IAE7BJ,EAAkB,kBAAmB,CACpCY,aAAc,UACdC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,6BALdf,CASC,kBAAC,IAAD,KACE,kBAACF,EAAD,CAAQkB,MAAM,WAAd,gBACA,kBAAClB,EAAD,CAAQkB,MAAM,UAAd,cACA,kBAAClB,EAAD,CAAQkB,MAAM,SAAd,aACA,kBAAClB,EAAD,CAAQkB,MAAM,OAAd,uBAIN,kBAAC,IAAK9D,KAAN,CACEuD,MAAM,cACNC,eACEL,GAAoBC,GAAqBC,EACrC,QACA,GAENI,KAAMN,GAAoBC,GAAqBC,GAAiB,IAE/DP,EAAkB,cAAe,CAChCa,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,qCAJdf,CAOE,kBAAC,IAAD,CAAO5C,KAAK,OAAO6D,YAAY,YACjCjB,EAAkB,WAAY,CAC7BY,aAAc,WACdC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,iCALdf,CASC,kBAAC,IAAD,KACE,kBAACF,EAAD,CAAQkB,MAAM,YAAd,gBACA,kBAAClB,EAAD,CAAQkB,MAAM,eAAd,mBACA,kBAAClB,EAAD,CAAQkB,MAAM,kBAAd,sBACA,kBAAClB,EAAD,CAAQkB,MAAM,YAAd,kBAGHhB,EAAkB,eAAgB,CACjCa,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,sCAJdf,CAOE,kBAAC,IAAD,CAAO5C,KAAK,OAAO6D,YAAY,aAEpC,kBAAC,IAAK/D,KAAN,KACE,kBAAC,IAAD,CACEE,KAAK,UACL8D,SAAS,SACTC,UAlOItB,EAkOgBI,IAjOzBmB,OAAOC,KAAKxB,GAAayB,MAAK,SAAAC,GAAK,OAAI1B,EAAY0B,QAmO9C,kBAAC,IAAD,CAAMnE,KAAK,eALb,cAOA,kBAAC,IAAD,CACEA,KAAK,SACL8D,SAAS,QACTpE,QAASC,KAAK4C,YACdtD,MAAO,CAAEmF,WAAY,QAErB,kBAAC,IAAD,CAAMpE,KAAK,SANb,YAUJ,kBAAC,IAAD,CAAMV,MAAM,SAAS+E,KAAK,SACvB1E,KAAKpB,MAAMmD,a,GA7OOzB,aAsPdqE,EAFOC,IAAKC,OAAO,CAAEC,KAAM,kBAApBF,CAAwC9C,GC9OxDiD,E,2MACJnG,MAAQ,CACNmD,OAAQ,M,EAOVC,aAAe,SAAA9C,GACbA,EAAE+C,iBAEF,EAAKC,MAAMC,KAAKC,gBAAe,SAACC,EAAKC,GACnC,IAAKD,EAAK,CAAC,IACD2C,EAAmD1C,EAAnD0C,cAAeC,EAAoC3C,EAApC2C,gBAAiBC,EAAmB5C,EAAnB4C,eACpCnD,EAAS,KAEb,OAAQiD,GACN,IAAK,UACH,OAAQE,GACN,IAAK,SACHnD,EAASrB,EAAuBiC,OAAOsC,IACvC,MACF,IAAK,QACHlD,EAASnB,EAAsB+B,OAAOsC,IACtC,MACF,IAAK,MACHlD,EAASlB,EACP8B,OAAOsC,IACPE,cACF,MACF,QACEpD,EAASY,OAAOsC,GAEpB,MACF,IAAK,SACH,OAAQC,GACN,IAAK,UACHnD,EAASjB,EAAuBmE,GAChC,MACF,IAAK,QACHlD,EAASX,EAAqB6D,GAC9B,MACF,IAAK,MACHlD,EAASV,EAAmB4D,GAAiBE,cAC7C,MACF,QACEpD,EAASrB,EACPI,EAAuBmE,IAG7B,MACF,IAAK,QACH,OAAQC,GACN,IAAK,UACHnD,EAAST,EAAsB2D,GAC/B,MACF,IAAK,SACHlD,EAASP,EAAqByD,GAC9B,MACF,IAAK,MACHlD,EAASN,EAAkBwD,GAAiBE,cAC5C,MACF,QACEpD,EAASnB,EACPU,EAAsB2D,IAG5B,MACF,IAAK,MACH,OAAQC,GACN,IAAK,UACHnD,EAASL,EAAoBuD,GAC7B,MACF,IAAK,SACHlD,EAASH,EAAmBqD,GAC5B,MACF,IAAK,QACHlD,EAASF,EAAkBoD,GAC3B,MACF,QACElD,EAASlB,EACPa,EAAoBuD,IACpBE,eAKV,EAAKpG,SAAS,CAAEgD,gB,EAKtBa,YAAc,WACZ,EAAKV,MAAMC,KAAKU,cAChB,EAAKX,MAAMC,KAAKC,iBAEhB,EAAKrD,SAAS,CAAEgD,OAAQ,Q,mFA3FxB/B,KAAKkC,MAAMC,KAAKC,mB,+BA8FR,IAxGMU,EAyGNC,EAAWC,IAAXD,OADD,EAOH/C,KAAKkC,MAAMC,KAJbc,EAHK,EAGLA,kBACAC,EAJK,EAILA,eACAC,EALK,EAKLA,cACAC,EANK,EAMLA,eAIIgC,EACJhC,EAAe,kBAAoBD,EAAc,iBAC7CkC,EACJjC,EAAe,oBAAsBD,EAAc,mBAC/CmC,EACJlC,EAAe,mBAAqBD,EAAc,kBAEpD,OACE,kBAAC,IAAD,CAAMxD,MAAM,aACV,kBAAC,IAAD,CAAM8D,SAAUzD,KAAKgC,cACnB,kBAAC,IAAK7B,KAAN,CACEuD,MAAM,OACNC,eACEyB,GAAsBC,EAAuB,QAAU,GAEzDzB,KAAMwB,GAAsBC,GAAwB,IAEnDpC,EAAkB,gBAAiB,CAClCY,aAAc,UACdC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,oCALdf,CASC,kBAAC,IAAD,KACE,kBAACF,EAAD,CAAQkB,MAAM,WAAd,gBACA,kBAAClB,EAAD,CAAQkB,MAAM,UAAd,cACA,kBAAClB,EAAD,CAAQkB,MAAM,SAAd,aACA,kBAAClB,EAAD,CAAQkB,MAAM,OAAd,sBAGHhB,EAAkB,kBAAmB,CACpCa,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,+BAJdf,CAOE,kBAAC,IAAD,CAAO5C,KAAK,OAAO6D,YAAY,aAEpC,kBAAC,IAAK/D,KAAN,CACEuD,MAAM,KACNC,eAAgB2B,EAAsB,QAAU,GAChD1B,KAAM0B,GAAuB,IAE5BrC,EAAkB,iBAAkB,CACnCY,aAAc,UACdC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,oCALdf,CASC,kBAAC,IAAD,KACE,kBAACF,EAAD,CAAQkB,MAAM,WAAd,gBACA,kBAAClB,EAAD,CAAQkB,MAAM,UAAd,cACA,kBAAClB,EAAD,CAAQkB,MAAM,SAAd,aACA,kBAAClB,EAAD,CAAQkB,MAAM,OAAd,uBAIN,kBAAC,IAAK9D,KAAN,KACE,kBAAC,IAAD,CACEE,KAAK,UACL8D,SAAS,SACTC,UAtLItB,EAsLgBI,IArLzBmB,OAAOC,KAAKxB,GAAayB,MAAK,SAAAC,GAAK,OAAI1B,EAAY0B,QAuL9C,kBAAC,IAAD,CAAMnE,KAAK,SALb,YAOA,kBAAC,IAAD,CACEA,KAAK,SACL8D,SAAS,QACTpE,QAASC,KAAK4C,YACdtD,MAAO,CAAEmF,WAAY,QAErB,kBAAC,IAAD,CAAMpE,KAAK,SANb,YAUJ,kBAAC,IAAD,CAAMV,MAAM,SAAS+E,KAAK,SACvB1E,KAAKpB,MAAMmD,a,GAjMMzB,aA0MbiF,EAFMX,IAAKC,OAAO,CAAEC,KAAM,kBAApBF,CAAwCG,GC3NrDS,EAAWnG,IAAXmG,OAYOC,EAVG,WAChB,OACE,kBAACD,EAAD,6BACyB,sDADzB,cACwE,IACtE,kBAAC,IAAD,CAAMnF,KAAK,QAAQqF,MAAM,WAF3B,MAE0C,IACxC,uBAAGnH,KAAK,mCAAR,oBC0BSoH,G,wLAxBH,IACAC,EAAYvG,IAAZuG,QACR,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAACA,EAAD,CAAStG,MAAO,CAAEG,gBAAiB,OAAQD,QAAS,aAClD,kBAAC,IAAD,CAAKa,KAAK,OAAOwF,QAAQ,UACvB,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACvC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWd,IACjC,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,aAAaC,UAAWd,IAC1C,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,cAAcC,UAAW1B,QAKnD,kBAAC,EAAD,Y,GAlBQrE,cCCEgG,QACW,cAA7BjI,OAAOC,SAASiI,UAEe,UAA7BlI,OAAOC,SAASiI,UAEhBlI,OAAOC,SAASiI,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.df6817a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Layout, PageHeader, Menu, Icon } from \"antd\";\r\n\r\nimport Logo from \"../logo.svg\";\r\n\r\nconst getCurrentRoute = () => {\r\n  return window.location.href\r\n    .replace(/https?:\\/\\//, \"\")\r\n    .replace(/\\?.*/, \"\")\r\n    .split(\"/\")\r\n    .reverse()[0];\r\n};\r\n\r\nclass AppHeader extends Component {\r\n  state = {\r\n    current: \"\"\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    if (getCurrentRoute() !== this.state.current) {\r\n      this.setState({ current: getCurrentRoute() });\r\n    }\r\n  };\r\n\r\n  componentDidUpdate = () => {\r\n    if (getCurrentRoute() !== this.state.current) {\r\n      this.setState({ current: getCurrentRoute() });\r\n    }\r\n  };\r\n\r\n  handleClick = e => {\r\n    this.setState({ current: e.key });\r\n  };\r\n\r\n  render() {\r\n    const { Header } = Layout;\r\n    return (\r\n      <Header style={{ height: \"auto\", padding: \"0px\" }}>\r\n        <PageHeader\r\n          style={{\r\n            backgroundColor: \"#fff\",\r\n            border: \"1px solid rgb(235, 237, 240)\"\r\n          }}\r\n          title=\"Number Systems App\"\r\n          avatar={{\r\n            src: Logo\r\n          }}\r\n        />\r\n        <Menu\r\n          onClick={this.handleClick}\r\n          selectedKeys={[this.state.current]}\r\n          mode=\"horizontal\"\r\n        >\r\n          <Menu.Item key=\"converter\">\r\n            <Link to=\"converter\">\r\n              <Icon type=\"swap\" />\r\n              Converter\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"calculator\">\r\n            <Link to=\"calculator\">\r\n              <Icon type=\"calculator\" />\r\n              Calculator\r\n            </Link>\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppHeader;\r\n","export const isNumberValid = n => {\r\n  if (isNaN(n) || typeof n !== \"number\") {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const convertDecimalToBinary = n => {\r\n  if (isNumberValid(n)) {\r\n    return n.toString(2);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const convertDecimalToOctal = n => {\r\n  if (isNumberValid(n)) {\r\n    return n.toString(8);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const convertDecimalToHex = n => {\r\n  if (isNumberValid(n)) {\r\n    return n.toString(16);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const convertBinaryToDecimal = n => {\r\n  let binary = n.toString().split(\"\");\r\n\r\n  for (let i = 0; i < n.toString().length; i++) {\r\n    if (binary[i] < 0 || binary[i] > 1) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  return parseInt(binary.join(\"\"), 2);\r\n};\r\n\r\nexport const convertBinaryToOctal = n => {\r\n  return convertDecimalToOctal(convertBinaryToDecimal(n));\r\n};\r\n\r\nexport const convertBinaryToHex = n => {\r\n  return convertDecimalToHex(convertBinaryToDecimal(n));\r\n};\r\n\r\nexport const convertOctalToDecimal = n => {\r\n  let octal = n.toString().split(\"\");\r\n\r\n  for (let i = 0; i < n.toString().length; i++) {\r\n    if (octal[i] < 0 || octal[i] > 7) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  return parseInt(octal.join(\"\"), 8);\r\n};\r\n\r\nexport const convertOctalToBinary = n => {\r\n  return convertDecimalToBinary(convertOctalToDecimal(n));\r\n};\r\n\r\nexport const convertOctalToHex = n => {\r\n  return convertDecimalToHex(convertOctalToDecimal(n));\r\n};\r\n\r\nexport const convertHexToDecimal = n => {\r\n  let hex = n.toString().split(\"\");\r\n\r\n  for (let i = 0; i < n.toString().length; i++) {\r\n    if (hex[i] < 0 || hex[i] > 15) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  return parseInt(hex.join(\"\"), 16);\r\n};\r\n\r\nexport const convertHexToBinary = n => {\r\n  return convertDecimalToBinary(convertHexToDecimal(n));\r\n};\r\n\r\nexport const convertHexToOctal = n => {\r\n  return convertDecimalToOctal(convertHexToDecimal(n));\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { Card, Form, Input, Select, Button, Icon } from \"antd\";\r\n\r\nimport {\r\n  convertDecimalToBinary,\r\n  convertDecimalToOctal,\r\n  convertDecimalToHex,\r\n  convertBinaryToDecimal,\r\n  convertOctalToDecimal,\r\n  convertHexToDecimal\r\n} from \"../functions/conversion\";\r\n\r\nconst hasErrors = fieldsError => {\r\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n};\r\n\r\nclass FormCalculator extends Component {\r\n  state = {\r\n    result: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.form.validateFields();\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        const { calculationBase, firstNumber, secondNumber, operator } = values;\r\n        let result = null;\r\n\r\n        switch (calculationBase) {\r\n          case \"decimal\":\r\n            switch (operator) {\r\n              case \"addition\":\r\n                result = Number(firstNumber) + Number(secondNumber);\r\n                break;\r\n              case \"subtraction\":\r\n                result = Number(firstNumber) - Number(secondNumber);\r\n                break;\r\n              case \"multiplication\":\r\n                result = Number(firstNumber) * Number(secondNumber);\r\n                break;\r\n              case \"division\":\r\n                result = Number(firstNumber) / Number(secondNumber);\r\n                break;\r\n            }\r\n            break;\r\n          case \"binary\":\r\n            switch (operator) {\r\n              case \"addition\":\r\n                result = convertDecimalToBinary(\r\n                  convertBinaryToDecimal(firstNumber) +\r\n                    convertBinaryToDecimal(secondNumber)\r\n                );\r\n                break;\r\n              case \"subtraction\":\r\n                result = convertDecimalToBinary(\r\n                  convertBinaryToDecimal(firstNumber) -\r\n                    convertBinaryToDecimal(secondNumber)\r\n                );\r\n                break;\r\n              case \"multiplication\":\r\n                result = convertDecimalToBinary(\r\n                  convertBinaryToDecimal(firstNumber) *\r\n                    convertBinaryToDecimal(secondNumber)\r\n                );\r\n                break;\r\n              case \"division\":\r\n                result = convertDecimalToBinary(\r\n                  convertBinaryToDecimal(firstNumber) /\r\n                    convertBinaryToDecimal(secondNumber)\r\n                );\r\n                break;\r\n            }\r\n            break;\r\n          case \"octal\":\r\n            switch (operator) {\r\n              case \"addition\":\r\n                result = convertDecimalToOctal(\r\n                  convertOctalToDecimal(firstNumber) +\r\n                    convertOctalToDecimal(secondNumber)\r\n                );\r\n                break;\r\n              case \"subtraction\":\r\n                result = convertDecimalToOctal(\r\n                  convertOctalToDecimal(firstNumber) -\r\n                    convertOctalToDecimal(secondNumber)\r\n                );\r\n                break;\r\n              case \"multiplication\":\r\n                result = convertDecimalToOctal(\r\n                  convertOctalToDecimal(firstNumber) *\r\n                    convertOctalToDecimal(secondNumber)\r\n                );\r\n                break;\r\n              case \"division\":\r\n                result = convertDecimalToOctal(\r\n                  convertOctalToDecimal(firstNumber) /\r\n                    convertOctalToDecimal(secondNumber)\r\n                );\r\n                break;\r\n            }\r\n            break;\r\n          case \"hex\":\r\n            switch (operator) {\r\n              case \"addition\":\r\n                result = convertDecimalToHex(\r\n                  convertHexToDecimal(firstNumber) +\r\n                    convertHexToDecimal(secondNumber)\r\n                );\r\n                break;\r\n              case \"subtraction\":\r\n                result = convertDecimalToHex(\r\n                  convertHexToDecimal(firstNumber) -\r\n                    convertHexToDecimal(secondNumber)\r\n                );\r\n                break;\r\n              case \"multiplication\":\r\n                result = convertDecimalToHex(\r\n                  convertHexToDecimal(firstNumber) *\r\n                    convertHexToDecimal(secondNumber)\r\n                );\r\n                break;\r\n              case \"division\":\r\n                result = convertDecimalToHex(\r\n                  convertHexToDecimal(firstNumber) /\r\n                    convertHexToDecimal(secondNumber)\r\n                );\r\n                break;\r\n            }\r\n            break;\r\n        }\r\n\r\n        this.setState({ result });\r\n      }\r\n    });\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.props.form.resetFields();\r\n    this.props.form.validateFields();\r\n\r\n    this.setState({ result: null });\r\n  };\r\n\r\n  render() {\r\n    const { Option } = Select;\r\n    const {\r\n      getFieldDecorator,\r\n      getFieldsError,\r\n      getFieldError,\r\n      isFieldTouched\r\n    } = this.props.form;\r\n\r\n    // Only show error after a field is touched.\r\n    const calculationBaseError =\r\n      isFieldTouched(\"calculationBase\") && getFieldError(\"calculationBase\");\r\n    const firstNumberError =\r\n      isFieldTouched(\"firstNumber\") && getFieldError(\"firstNumber\");\r\n    const secondNumberError =\r\n      isFieldTouched(\"secondNumber\") && getFieldError(\"secondNumber\");\r\n    const operatorError =\r\n      isFieldTouched(\"operator\") && getFieldError(\"operator\");\r\n\r\n    return (\r\n      <Card title=\"Calculator\">\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Form.Item\r\n            label=\"Base\"\r\n            validateStatus={calculationBaseError ? \"error\" : \"\"}\r\n            help={calculationBaseError || \"\"}\r\n          >\r\n            {getFieldDecorator(\"calculationBase\", {\r\n              initialValue: \"decimal\",\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your base!\"\r\n                }\r\n              ]\r\n            })(\r\n              <Select>\r\n                <Option value=\"decimal\">Decimal (10)</Option>\r\n                <Option value=\"binary\">Binary (2)</Option>\r\n                <Option value=\"octal\">Octal (8)</Option>\r\n                <Option value=\"hex\">Hexadecimal (16)</Option>\r\n              </Select>\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Calculation\"\r\n            validateStatus={\r\n              firstNumberError || secondNumberError || operatorError\r\n                ? \"error\"\r\n                : \"\"\r\n            }\r\n            help={firstNumberError || secondNumberError || operatorError || \"\"}\r\n          >\r\n            {getFieldDecorator(\"firstNumber\", {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your first number!\"\r\n                }\r\n              ]\r\n            })(<Input type=\"text\" placeholder=\"Number\" />)}\r\n            {getFieldDecorator(\"operator\", {\r\n              initialValue: \"addition\",\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your operator!\"\r\n                }\r\n              ]\r\n            })(\r\n              <Select>\r\n                <Option value=\"addition\">+ (Addition)</Option>\r\n                <Option value=\"subtraction\">- (Subtraction)</Option>\r\n                <Option value=\"multiplication\">* (Multiplication)</Option>\r\n                <Option value=\"division\">/ (Division)</Option>\r\n              </Select>\r\n            )}\r\n            {getFieldDecorator(\"secondNumber\", {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your second number!\"\r\n                }\r\n              ]\r\n            })(<Input type=\"text\" placeholder=\"Number\" />)}\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              disabled={hasErrors(getFieldsError())}\r\n            >\r\n              <Icon type=\"calculator\" /> Calculate\r\n            </Button>\r\n            <Button\r\n              type=\"danger\"\r\n              htmlType=\"reset\"\r\n              onClick={this.handleReset}\r\n              style={{ marginLeft: \"5px\" }}\r\n            >\r\n              <Icon type=\"undo\" /> Reset\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n        <Card title=\"Result\" size=\"small\">\r\n          {this.state.result}\r\n        </Card>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nconst AppCalculator = Form.create({ name: \"app_calculator\" })(FormCalculator);\r\n\r\nexport default AppCalculator;\r\n","import React, { Component } from \"react\";\r\nimport { Card, Form, Input, Select, Button, Icon } from \"antd\";\r\n\r\nimport {\r\n  convertDecimalToBinary,\r\n  convertDecimalToOctal,\r\n  convertDecimalToHex,\r\n  convertBinaryToDecimal,\r\n  convertBinaryToOctal,\r\n  convertBinaryToHex,\r\n  convertOctalToDecimal,\r\n  convertOctalToBinary,\r\n  convertOctalToHex,\r\n  convertHexToDecimal,\r\n  convertHexToBinary,\r\n  convertHexToOctal\r\n} from \"../functions/conversion\";\r\n\r\nconst hasErrors = fieldsError => {\r\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n};\r\n\r\nclass FormConverter extends Component {\r\n  state = {\r\n    result: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.form.validateFields();\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        const { baseToConvert, numberToConvert, conversionBase } = values;\r\n        let result = null;\r\n\r\n        switch (baseToConvert) {\r\n          case \"decimal\":\r\n            switch (conversionBase) {\r\n              case \"binary\":\r\n                result = convertDecimalToBinary(Number(numberToConvert));\r\n                break;\r\n              case \"octal\":\r\n                result = convertDecimalToOctal(Number(numberToConvert));\r\n                break;\r\n              case \"hex\":\r\n                result = convertDecimalToHex(\r\n                  Number(numberToConvert)\r\n                ).toUpperCase();\r\n                break;\r\n              default:\r\n                result = Number(numberToConvert);\r\n            }\r\n            break;\r\n          case \"binary\":\r\n            switch (conversionBase) {\r\n              case \"decimal\":\r\n                result = convertBinaryToDecimal(numberToConvert);\r\n                break;\r\n              case \"octal\":\r\n                result = convertBinaryToOctal(numberToConvert);\r\n                break;\r\n              case \"hex\":\r\n                result = convertBinaryToHex(numberToConvert).toUpperCase();\r\n                break;\r\n              default:\r\n                result = convertDecimalToBinary(\r\n                  convertBinaryToDecimal(numberToConvert)\r\n                );\r\n            }\r\n            break;\r\n          case \"octal\":\r\n            switch (conversionBase) {\r\n              case \"decimal\":\r\n                result = convertOctalToDecimal(numberToConvert);\r\n                break;\r\n              case \"binary\":\r\n                result = convertOctalToBinary(numberToConvert);\r\n                break;\r\n              case \"hex\":\r\n                result = convertOctalToHex(numberToConvert).toUpperCase();\r\n                break;\r\n              default:\r\n                result = convertDecimalToOctal(\r\n                  convertOctalToDecimal(numberToConvert)\r\n                );\r\n            }\r\n            break;\r\n          case \"hex\":\r\n            switch (conversionBase) {\r\n              case \"decimal\":\r\n                result = convertHexToDecimal(numberToConvert);\r\n                break;\r\n              case \"binary\":\r\n                result = convertHexToBinary(numberToConvert);\r\n                break;\r\n              case \"octal\":\r\n                result = convertHexToOctal(numberToConvert);\r\n                break;\r\n              default:\r\n                result = convertDecimalToHex(\r\n                  convertHexToDecimal(numberToConvert)\r\n                ).toUpperCase();\r\n            }\r\n            break;\r\n        }\r\n\r\n        this.setState({ result });\r\n      }\r\n    });\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.props.form.resetFields();\r\n    this.props.form.validateFields();\r\n\r\n    this.setState({ result: null });\r\n  };\r\n\r\n  render() {\r\n    const { Option } = Select;\r\n    const {\r\n      getFieldDecorator,\r\n      getFieldsError,\r\n      getFieldError,\r\n      isFieldTouched\r\n    } = this.props.form;\r\n\r\n    // Only show error after a field is touched.\r\n    const baseToConvertError =\r\n      isFieldTouched(\"baseToConvert\") && getFieldError(\"baseToConvert\");\r\n    const numberToConvertError =\r\n      isFieldTouched(\"numberToConvert\") && getFieldError(\"numberToConvert\");\r\n    const conversionBaseError =\r\n      isFieldTouched(\"conversionBase\") && getFieldError(\"conversionBase\");\r\n\r\n    return (\r\n      <Card title=\"Converter\">\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Form.Item\r\n            label=\"From\"\r\n            validateStatus={\r\n              baseToConvertError || numberToConvertError ? \"error\" : \"\"\r\n            }\r\n            help={baseToConvertError || numberToConvertError || \"\"}\r\n          >\r\n            {getFieldDecorator(\"baseToConvert\", {\r\n              initialValue: \"decimal\",\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your number base!\"\r\n                }\r\n              ]\r\n            })(\r\n              <Select>\r\n                <Option value=\"decimal\">Decimal (10)</Option>\r\n                <Option value=\"binary\">Binary (2)</Option>\r\n                <Option value=\"octal\">Octal (8)</Option>\r\n                <Option value=\"hex\">Hexadecimal (16)</Option>\r\n              </Select>\r\n            )}\r\n            {getFieldDecorator(\"numberToConvert\", {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your number!\"\r\n                }\r\n              ]\r\n            })(<Input type=\"text\" placeholder=\"Number\" />)}\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"To\"\r\n            validateStatus={conversionBaseError ? \"error\" : \"\"}\r\n            help={conversionBaseError || \"\"}\r\n          >\r\n            {getFieldDecorator(\"conversionBase\", {\r\n              initialValue: \"decimal\",\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your number base!\"\r\n                }\r\n              ]\r\n            })(\r\n              <Select>\r\n                <Option value=\"decimal\">Decimal (10)</Option>\r\n                <Option value=\"binary\">Binary (2)</Option>\r\n                <Option value=\"octal\">Octal (8)</Option>\r\n                <Option value=\"hex\">Hexadecimal (16)</Option>\r\n              </Select>\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              disabled={hasErrors(getFieldsError())}\r\n            >\r\n              <Icon type=\"swap\" /> Convert\r\n            </Button>\r\n            <Button\r\n              type=\"danger\"\r\n              htmlType=\"reset\"\r\n              onClick={this.handleReset}\r\n              style={{ marginLeft: \"5px\" }}\r\n            >\r\n              <Icon type=\"undo\" /> Reset\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n        <Card title=\"Result\" size=\"small\">\r\n          {this.state.result}\r\n        </Card>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nconst AppConverter = Form.create({ name: \"form_converter\" })(FormConverter);\r\n\r\nexport default AppConverter;\r\n","import React from \"react\";\r\nimport { Layout, Icon } from \"antd\";\r\n\r\nconst { Footer } = Layout;\r\n\r\nconst AppFooter = () => {\r\n  return (\r\n    <Footer>\r\n      Copyright &copy; 2020. <strong>Number Systems App</strong>. Made with{\" \"}\r\n      <Icon type=\"heart\" theme=\"filled\" /> by{\" \"}\r\n      <a href=\"https://github.com/andikabahari\">Andika Bahari.</a>\r\n    </Footer>\r\n  );\r\n};\r\n\r\nexport default AppFooter;\r\n","import React, { Component } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { Layout, Row, Col } from \"antd\";\n\nimport AppHeader from \"./components/AppHeader\";\nimport AppCalculator from \"./components/AppCalculator\";\nimport AppConverter from \"./components/AppConverter\";\nimport AppFooter from \"./components/AppFooter\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    const { Content } = Layout;\n    return (\n      <div>\n        <Layout>\n          <AppHeader />\n          <Content style={{ backgroundColor: \"#fff\", padding: \"70px 0px\" }}>\n            <Row type=\"flex\" justify=\"center\">\n              <Col xl={12} lg={14} md={16} sm={18} xs={20}>\n                <Switch>\n                  <Route exact path=\"/\" component={AppConverter} />\n                  <Route exact path=\"/converter\" component={AppConverter} />\n                  <Route exact path=\"/calculator\" component={AppCalculator} />\n                </Switch>\n              </Col>\n            </Row>\n          </Content>\n          <AppFooter />\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}